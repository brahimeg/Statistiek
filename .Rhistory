q()
5
5+9
>5
>5+9
"Hello world"
8==4+4
8!=9
15/5*3+exp(5)-log(3)
a <- 15-7
b <- 18
b
groet <- "hello world"
groet
8 = 8
8 == 8
a = "amjksjs"
Queen	<- c("Freddie",	"John","Brian",	"Roger")
queen
Queen
length(Queen)
Queen[2:4]
QueenNow	<- c(Queen[2:4],"Adam")
QueenNow2	<- c(Queen[-1],"Adam")
QueenNow2
Queeen
Queen
Queen
Queen[-1]
3;
3;	5;	a	<- 7;	b	<- 5;	c	<- a	+	b
3;	5;	e	<- f	+	g
3;	5;	e	<- f	+	g
a	<- 7;	b	<- 5;	c	<- a	+	b
5
a	<- c(4,5,7,8,10,11)
b	<- a[length(a):1]
b	<- a[length(a):2]
b	<- a[1:2]
b	<- a[length(a):1]
d <- a*b
c;d
dit <- d[2:4]
b+dit
fout < 5+4
e <- 4; e < 5+4
clearPushBack()
smurfenlied
smurfenlied
source('C:/Users/Ibrahim-main/Dropbox/School/Experimentele methode & statistiek/Project/test.R')
smurfenlied
la <- "la"
smurfenlied	<- c(rep(la,6),"				",rep(la,5))
smurfenlied
la <- "la"
smurfenlied <- c(rep(la,6)),"    ",rep(la,5))
smurfenlied
la <- "la"
smurfenlied <- c(rep(la,6)),"      ",rep(la,5))
smurfenlied
la <- "la"
smurfenlied <- c(rep(la,6),"      ",rep(la,5))
smurfenlied
a <- "la"
rep()
rep(
)
?rep
help(rep)
int <- 0:9
decimal <- seq(0,0.9,0.1)
decimal
decimal <- seq(0,0.9,0.2)
index <- rep(c("A","B"),length(int)/2)
decimal <- seq(0,0.9,0.1)
indexAlt <- c(rep("nee",length(int)/2),rep("ja",length(int)/2))
indexAlt
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)
myframe
myFrame
decimal <- seq(0,0.9,0.2)
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)
myFrame
myFrame[1:5,]
myFrame[,1:5]
myFrame[,1:2]
names(myFrame)
myFrame$index1
myFrame$index2
myFrame$
)
dim(myFrame)
myFrame
dim(myFrame)
myFrame[myFrame$index1	==	"A",]
myFrame[myFrame$index1	==	"A"	&	myFrame$index2	== "nee",]
myFrame[myFrame$index1	==	"A",]
myFrame[myFrame$index1	==	"A"	&	myFrame$index2	== "nee",]
myFrame$oddEven	<- NA
myFrame[myFrame$index1	==	"A",]$oddEven	<- "Even"
myFrame[myFrame$index1	!=	"A",]$oddEven	<- "Odd"
names(myFrame)
myFrame
help(NA)
myFrame$rounded <- NA
myFrame[myFrame$index2 == "nee",]$rounded <- 0
myFrame[myFrame$index2 == "ja",]$rounded <- 1
names(myFrame)
myFrame
decimal <- seq(0,0.9,0.1)
names(myFrame)
myFrame
decimal <- seq(0,0.9,0.1)
myFrame[myFrame$index1	==	"A",]
myFrame[myFrame$index1	==	"A"	&	myFrame$index2	== "nee",]
myFrame$oddEven	<- NA
myFrame[myFrame$index1	==	"A",]$oddEven	<- "Even"
myFrame[myFrame$index1	!=	"A",]$oddEven	<- "Odd"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$index2 == "nee",]$rounded <- 0
myFrame[myFrame$index2 == "ja",]$rounded <- 1
myFrame$oddEven	<- NA
myFrame[myFrame$index1	==	"A",]$oddEven	<- "Even"
myFrame[myFrame$index1	!=	"A",]$oddEven	<- "Odd"
names(myFrame)
myFrame
decimal <- seq(0,0.9,0.1)
decimal
myFrame
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)
myFrame
myFrame[myFrame$index1	==	"A",]
myFrame[myFrame$index1	==	"A"	&	myFrame$index2	== "nee",]
myFrame$oddEven	<- NA
myFrame[myFrame$index1	==	"A",]$oddEven	<- "Even"
myFrame[myFrame$index1	!=	"A",]$oddEven	<- "Odd"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$index2 == "nee",]$rounded <- 0
myFrame[myFrame$index2 == "ja",]$rounded <- 1
myFrame
index <- rep(c("A","B"),length(int)/2)
indexAlt <- c(rep("nee",length(int)/2),rep("ja",length(int)/2))
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)
myFrame[myFrame$index1	==	"A",]
myFrame[myFrame$index1	==	"A"	&	myFrame$index2	== "nee",]
myFrame$oddEven	<- NA
myFrame[myFrame$index1	==	"A",]$oddEven	<- "Even"
myFrame[myFrame$index1	!=	"A",]$oddEven	<- "Odd"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$index2 == "nee",]$rounded <- 0
myFrame[myFrame$index2 == "ja",]$rounded <- 1
myFrame
myFrame
int <- 0:9
decimal <- seq(0,0.9,0.1)          ### what does the function seq do?
index <- rep(c("A","B"),length(int)/2)
indexAlt <- c(rep("nee",length(int)/2),rep("ja",length(int)/2))
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)     ### what does data.frame do?
myFrame[1:5,]       ### [1:5,] means:
myFrame[,1:2]			  ### [,1:2]  means:
names(myFrame)      ### names means:
myFrame$index1
myFrame$index2			### in this setting, the $ means:
dim(myFrame)				### dim means:
myFrame[myFrame$index1	==	"A",]
myFrame[myFrame$index1	==	"A"	&	myFrame$index2	== "nee",]
myFrame$oddEven	<- NA
myFrame[myFrame$index1	==	"A",]$oddEven	<- "Even"
myFrame[myFrame$index1	!=	"A",]$oddEven	<- "Odd"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$index2 == "nee",]$rounded <- 0
myFrame[myFrame$index2 == "ja",]$rounded <- 1
myFrame
myFrame$moduloA2	<- myFrame$int %%2
myFrame
g <- 4
g%%2
g%2
g%%2
g%%a
g <- 7
g%%2
myFrame
myFrame[myFrame$index1	==	"A",]
myFrame[,1]
myFrame$index1
mean(myFrame[myFrame$index1	==	"A",]$int)
mean(myFrame[myFrame$index1	==	"A",]$int)
myFrame[myFrame$index1	==	"A",]$int
myFrame[myFrame$index1	==	"A",]$int
mean(myFrame[myFrame$index1	==	"A",]$int)
help(mean)
mean(myFrame[myFrame$index1	==	"A",]$int)
result	<- with(myFrame[myFrame$index1	==
"A",],mean(sum(int+decimal)/sum(int)*exp(decimal)))
help(with)
for	(i	in	unique(myFrame$index1))
{
with(myFrame[myFrame$index1	==	i,],print(mean(int)))
}
for	(i	in	unique(myFrame$index1))
{
with(myFrame[myFrame$index1	==	i,],mean(int))
}
myFrame
myFrame[myFrame$index1	==	i,]
myFrame[myFrame$index1	==	A,]
myFrame[myFrame$index1	== "a",]
myFrame[myFrame$index1	== "A",]
myFrame[myFrame$index1	== "B",]
cntr	<- 1
summation	<- 0
while(summation	<	10)
{
summation	<- summation	+	myFrame[cntr,]$int
cntr	<- cntr	+	1
}
print(paste("Counter	is:",	cntr,	"Summation	is:",	summation))
print(paste("Counter	is:",	cntr,	"Summation	is:",	summation))
help(paste)
cntr	<- 1
summation	<- 0
while(summation	<	10)
{
summation	<- summation	+	myFrame[cntr,]$int
cntr	<- cntr	+	1
}
print(paste("Counter is:",	cntr,	"Summation is:",	summation))
myFrameCopy	<- myFrame
myFrameCopy$c	<- NA
for	(r	in	1:nrow(myFrameCopy))
{
val	<- myFrameCopy[r,]$int
i	<- myFrameCopy[r,]$index1
if	(val	<	5	&	i	==	"A")
{
myFrameCopy[r,]$c	<- "EvenSmall"
}	else	if	(	i	==	"A")
{
myFrameCopy[r,]$c	<- "EvenLarge"
}	else
{
myFrameCopy[r,]$c	<- "Odd"
}
}
help(nA)
help(nA)
help(NA)
setwd("C:\\Users\\Ibrahim-main\\Dropbox\\School\\Experimentele methode & statistiek\\Project\\Assig2")
participantData <- read.csv("participant52data.csv", header=TRUE, sep=" ")
setwd("C:\\Users\\Ibrahim-main\\UU Kunstmatige Intelligentie\\School\\Experimentele methode & statistiek\\Project\\Assig2")
participantData <- read.csv("participant52data.csv", header=TRUE, sep=" "
participantData <- read.csv("participant52data.csv", header=TRUE, sep="""")
setwd("C:\\Users\\Ibrahim-main\\UU Kunstmatige Intelligentie\\School\\Experimentele methode & statistiek\\Project\\Assig2")
participantData <- read.csv("participant52data.csv", header=TRUE, sep="")
setwd("C:\\Users\\Ibrahim-main\\UU Kunstmatige Intelligentie\\School\\Experimentele methode & statistiek\\Project\\Assig2")
participantData <- read.csv("participant52data.csv", header=TRUE, sep=",")
setwd("C:\Users\Ibrahim-main\Dropbox\UU Kunstmatige Intelligentie\Experimentele methode & statistiek\Project\Assig2")
participantData <- read.csv("participant52data.csv", header=TRUE, sep=",")
setwd("C:\\Users\\Ibrahim-main\\Dropbox\\UU Kunstmatige Intelligentie\\Experimentele methode & statistiek\\Project\\Final\\Statistiek")
load("allData2018.Rdata")
wordlist_easy1 <- read.csv("easy1.csv", header = TRUE)
dualtaskData <- allData[allData$partOfExperiment == "dualTask",]
wordsdualtaskData <- dualtaskData[dualtaskData$Eventmessage2 == "correctNewWord",]
switchWindowData <- dualtaskData[dualtaskData$Eventmessage1 == "SwitchWindow" | dualtaskData$Eventmessage2 == "correctNewWord",]
MakeRandomString <- function(n=1, lenght=12)
{
randomString <- c(1:n)                  # initialize vector
for (i in 1:n)
{
randomString[i] <- paste(sample(letters,lenght, replace=TRUE),
collapse="")
}
return(randomString)
}
lengths <- 2:12
for(x in lengths){
MakeRandomString(10,lengths)
}
test <-
for(x in lengths){
MakeRandomString(10,lengths)
}
test <- for(x in lengths){
MakeRandomString(10,lengths)
}
for(x in lengths){
print(MakeRandomString(10,lengths))
}
MakeRandomString(2,5)
for(x in lengths){
print(MakeRandomString(10,x))
}
print(MakeRandomString(x^2,2))
for(x in lengths){
print(MakeRandomString(x^2,2))
}
for(x in lengths){
print(MakeRandomString(x^2,lengths))
}
for(x in lengths){
print(MakeRandomString(x^2,x))
}
list_words <- list(for(x in lengths){
print(MakeRandomString(x^2,x))
})
View(list_words)
View(list_words)
list_words <- for(x in lengths){
print(MakeRandomString(x^2,x))
}
list_words <- for(x in lengths){
print(MakeRandomString(x^2,x))
}
list_words <- NA
for(x in lengths){
list_words <- (MakeRandomString(x^2,x))
}
setwd("C:\\Users\\Ibrahim-main\\Dropbox\\UU Kunstmatige Intelligentie\\Experimentele methode & statistiek\\Project\\Final\\Statistiek")
load("allData2018.Rdata")
wordlist_easy1 <- read.csv("easy1.csv", header = TRUE)
dualtaskData <- allData[allData$partOfExperiment == "dualTask",]
wordsdualtaskData <- dualtaskData[dualtaskData$Eventmessage2 == "correctNewWord",]
switchWindowData <- dualtaskData[dualtaskData$Eventmessage1 == "SwitchWindow" | dualtaskData$Eventmessage2 == "correctNewWord",]
MakeRandomString <- function(n=1, lenght=12)
{
randomString <- c(1:n)                  # initialize vector
for (i in 1:n)
{
randomString[i] <- paste(sample(letters,lenght, replace=TRUE),
collapse="")
}
return(randomString)
}
lengths <- 2:12
list_words <- NA
for(x in lengths){
list_words <- (MakeRandomString(x^2,x))
}
setwd("C:\\Users\\Ibrahim-main\\Dropbox\\UU Kunstmatige Intelligentie\\Experimentele methode & statistiek\\Project\\Final\\Statistiek")
load("allData2018.Rdata")
wordlist_easy1 <- read.csv("easy1.csv", header = TRUE)
dualtaskData <- allData[allData$partOfExperiment == "dualTask",]
wordsdualtaskData <- dualtaskData[dualtaskData$Eventmessage2 == "correctNewWord",]
switchWindowData <- dualtaskData[dualtaskData$Eventmessage1 == "SwitchWindow" | dualtaskData$Eventmessage2 == "correctNewWord",]
MakeRandomString <- function(n=1, lenght=12)
{
randomString <- c(1:n)                  # initialize vector
for (i in 1:n)
{
randomString[i] <- paste(sample(letters,lenght, replace=TRUE),
collapse="")
}
return(randomString)
}
lengths <- 2:12
list_words <- NA
for(x in lengths){
list_words <- (MakeRandomString(1,x))
}
setwd("C:\\Users\\Ibrahim-main\\Dropbox\\UU Kunstmatige Intelligentie\\Experimentele methode & statistiek\\Project\\Final\\Statistiek")
load("allData2018.Rdata")
wordlist_easy1 <- read.csv("easy1.csv", header = TRUE)
dualtaskData <- allData[allData$partOfExperiment == "dualTask",]
wordsdualtaskData <- dualtaskData[dualtaskData$Eventmessage2 == "correctNewWord",]
switchWindowData <- dualtaskData[dualtaskData$Eventmessage1 == "SwitchWindow" | dualtaskData$Eventmessage2 == "correctNewWord",]
MakeRandomString <- function(n=1, lenght=12)
{
randomString <- c(1:n)                  # initialize vector
for (i in 1:n)
{
randomString[i] <- paste(sample(letters,lenght, replace=TRUE),
collapse="")
}
return(randomString)
}
lengths <- 2:12
list_words <- NA
for(x in lengths){
list_words <- (MakeRandomString(1,x))
}
list_words <- (MakeRandomString(2,x))
list_words <- list((MakeRandomString(2,x)))
View(list_words)
View(list_words)
counter <- 0
for(x in lengths){
list_words[counter] <- list((MakeRandomString(2,x)))
counter <- counter + 1
}
View(list_words)
View(list_words)
list_words <- NA
counter <- 0
for(x in lengths){
list_words[counter] <- list((MakeRandomString(x^X,x)))
counter <- counter + 1
}
list_words <- NA
counter <- 0
for(x in lengths){
list_words[counter] <- list((MakeRandomString(x^x,x)))
counter <- counter + 1
}
