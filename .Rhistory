5
9
5+9
"hello world"
5<9
8 == 4+4
8 != 9
15/5*3 + exp(5) - log(3)
a <- 15 -7
a
b <-18
b
b <- b+b
b
groet <- "hello world"
groet
Queen <- ("Freddie", "John", "Brian", "Roger")
Queen <- c("Freddie", "John", "Brian", "Roger")
queen
Queen
length(Queen)
Queen[2:4]
QueenNow <- c(Queen[2:4], "Adam")
Queennow2 <- c(Queen[-1], "Adam")
Queennow
QueenNow
Queennow2
Queennow4 c(Queen[-2])
Queennow4 <- c(Queen[-2])
Queennow4
3; 5; a<-7;b<-5;c<- a + b
c
3;5;e<- f + g
a <- c(4,5,7,8,10,11)
b<- a[length(a):1]
a
b
g <- a[4:1]
g
f <- a[4:2]
f
c<- a + b
d <- a*b
c;d
dit <- d[2:4]
b + dit
source('~/.active-rstudio-document')
la <- "la"
smurfenlied <- c(rep(la,6)," ",rep(la,5))
smurfenlied
rep(
)
help(rep)
?re
?rep
source('C:/Users/Marilva/Downloads/huh.R')
source('C:/Users/Marilva/Downloads/huh.R')
source('C:/Users/Marilva/Downloads/huh.R')
source('C:/Users/Marilva/Downloads/huh.R')
la <- "la"
smurfenlied <- c(rep(la,6)," ",rep(la,5))
smurfenlied
?rep
int <- 0:9
decimal <- seq(0,0.9,0.1)          ### what does the function seq do?
index <- rep(c("A","B"),length(int)/2)
indexAlt <- c(rep("nee",length(int)/2),rep("ja",length(int)/2))
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)     ### what does data.frame do?
myFrame[1:5,]       ### [1:5,] means:
myFrame[,1:2]			  ### [,1:2]  means:
names(myFrame)      ### names means:
myFrame$index1
myFrame$index2			### in this setting, the $ means:
dim(myFrame)				### dim means:
?seq
$decimal
myFrame$decimal
top <- c("r","y","q","t","a","p","r")
$top
help($)
help("$")
?dim
5<4
myFrame$decimal + 10
myFrame$index2 + 10
myFrame[myFrame$index1=="A",]
myFrame[myFrame$index1=="A" & myFrame$index2 == "nee",]
?NA
myFrame$oddEven <- NA
myFrame[myFrame$index1 == "A",]$oddEven<-"Even"
myFrame[myFrame$index1 != "A",]$oddEven<-"Odd"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$index2 < 0.5,]$rounded<-0
myFrame[myFrame$index2 > 0.5,]$rounded<-1
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$index2 < 0.5,]$rounded<- "0"
myFrame[myFrame$index2 > 0.5,]$rounded<- "1"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$decimal < 0.5,]$rounded<- "0"
myFrame[myFrame$decimal > 0.5,]$rounded<- "1"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$decimal < 0.5,]$rounded<- "0"
myFrame[myFrame$decimal >= 0.5,]$rounded<- "1"
names(myFrame)
myFrame
myFrame$moduloA2 <- myFrame$int %%2
myFrame
myFrame$moduloA2 <- myFrame$int %%2
myFrame$myRounded <- myFrame$decimal <- round(decimal,0)
myFrame
myFrame$myRounded <- round(decimal,0)
myFrame
int <- 0:9
decimal <- seq(0,0.9,0.1)          ### what does the function seq do? sequentie van 0 tot 0.9 in stapjes van 0.1
index <- rep(c("A","B"),length(int)/2)
indexAlt <- c(rep("nee",length(int)/2),rep("ja",length(int)/2))
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)     ### what does data.frame do? maakt een tabel van de gegeven colomnamen.
myFrame[1:5,]       ### [1:5,] means: de eerste 5 rijen en alle kolommen
myFrame[,1:2]			  ### [,1:2]  means: alle rijen en de eerste 2 kolommen
names(myFrame)      ### names means: namen van de kolommen (die zijn meeggeven aan data.frame)
myFrame$index1
myFrame$index2			### in this setting, the $ means: geef de opgevraagde kolom
dim(myFrame)				### dim means: geeft de dimensies van je data frame. Dus aantal rijen en kolommen.
### (run only the above lines of code)
### you created a data frame. I also asked some questions after specific commands.
### You can answer these questions behind the comment section to keep track of your personal notes.
myFrame[myFrame$index1=="A",] #retrieved alles waarbij index 1  A is.
myFrame[myFrame$index1=="A" & myFrame$index2 == "nee",] #retrieved alles waarbij indes 1 A is en index 2 nee.
myFrame$oddEven <- NA
myFrame[myFrame$index1 == "A",]$oddEven<-"Even"
myFrame[myFrame$index1 != "A",]$oddEven<-"Odd"
names(myFrame)
myFrame
myFrame$rounded <- NA
myFrame[myFrame$decimal < 0.5,]$rounded<- "0"
myFrame[myFrame$decimal >= 0.5,]$rounded<- "1"
names(myFrame)
myFrame
myFrame$moduloA2 <- myFrame$int %%2
myFrame$myRounded <- round(decimal,0)
myFrame
myFrame$moduloA2 <- myFrame$int %%2
myFrame$myRounded <- ceiling(myFrame$decimal,0)
myFrame
myFrame$moduloA2 <- myFrame$int %%2
myFrame$myRounded <- floor(myFrame$decimal,0)
myFrame
myFrame$moduloA2 <- myFrame$int %%2
myFrame$myRounded <- ceiling(decimal,0)
myFrame
myFrame$myRounded <- round(myFrame$decimal,0)
myFrame$myRounded <- round(myFrame$decimal,0)
myFrame
myFrame$myROunded <- NA
myFrame[myFrame$decimal < 0.5,]$myRounded<- "0"
myFrame[myFrame$decimal >= 0.5,]$myRounded<- "1"
myFrame
myFrame$myRounded <- NA
myFrame[myFrame$decimal < 0.5,]$myRounded<- "0"
myFrame[myFrame$decimal >= 0.5,]$myRounded<- "1"
myFrame
int <- 0:9
decimal <- seq(0,0.9,0.1)          ### what does the function seq do? sequentie van 0 tot 0.9 in stapjes van 0.1
index <- rep(c("A","B"),length(int)/2)
indexAlt <- c(rep("nee",length(int)/2),rep("ja",length(int)/2))
myFrame <- data.frame(index1= index,index2= indexAlt,int,decimal)     ### what does data.frame do? maakt een tabel van de gegeven colomnamen.
myFrame[1:5,]       ### [1:5,] means: de eerste 5 rijen en alle kolommen
myFrame[,1:2]			  ### [,1:2]  means: alle rijen en de eerste 2 kolommen
names(myFrame)      ### names means: namen van de kolommen (die zijn meeggeven aan data.frame)
myFrame$index1
myFrame$index2			### in this setting, the $ means: geef de opgevraagde kolom
dim(myFrame)				### dim means: geeft de dimensies van je data frame. Dus aantal rijen en kolommen.
### (run only the above lines of code)
### you created a data frame. I also asked some questions after specific commands.
### You can answer these questions behind the comment section to keep track of your personal notes.
myFrame[myFrame$index1=="A",] #retrieved alles waarbij index 1  A is.
myFrame[myFrame$index1=="A" & myFrame$index2 == "nee",] #retrieved alles waarbij indes 1 A is en index 2 nee.
myFrame$oddEven <- NA
myFrame[myFrame$index1 == "A",]$oddEven<-"Even"
myFrame[myFrame$index1 != "A",]$oddEven<-"Odd"
myFrame$rounded <- NA
myFrame[myFrame$decimal < 0.5,]$rounded<- "0"
myFrame[myFrame$decimal >= 0.5,]$rounded<- "1"
myFrame$moduloA2 <- myFrame$int %%2
myFrame$myRounded <- NA
myFrame[myFrame$decimal < 0.5,]$myRounded<- "0"
myFrame[myFrame$decimal >= 0.5,]$myRounded<- "1"
myFrame
###
###
### Section to address questions for section 4.1.F "Applying if/else/for/while & applying important functions
###
###
mean(myFrame[myFrame$index1 == "A",]$int)
result <- with(myFrame[myFrame$index1 == "A",], mean(sum(int+decimal)/sum(int)*exp(decimal)))
result
for (i in unique(myFrame$index1))
{
with(myFrame[myFrame$index1 == i,],print(mean(int)))
}
for (i in unique(myFrame$index1))
{
with(myFrame[myFrame$index1 == i,])
}
cntr <- 1
summation <- 0
while(summation <10)
{
summation <- summation + myFrame[cntr,]$int
cntr <- cntr + 1
}
print(paste("Counter is:", cntr, "Summation is:", summation))
for (r in 1:nrow(myFrameCopy))
{
val <- myFrameCopy[r,]$int
i <- myFrameCopy[r,]$index1
if(val <5 & i == "A")
{
myFrameCopy[r,]$c <- "EvenSmall"
}else if (i == "A")
{
myFrameCopy[r,]$c <- "EvenLarge"
}else
{
myFrameCopy[r,]$c <- "Odd"
}
}
myFrameCopy <- myFrameCopy
myFrameCopy$c <- NA
for (r in 1:nrow(myFrameCopy))
{
val <- myFrameCopy[r,]$int
i <- myFrameCopy[r,]$index1
if(val <5 & i == "A")
{
myFrameCopy[r,]$c <- "EvenSmall"
}else if (i == "A")
{
myFrameCopy[r,]$c <- "EvenLarge"
}else
{
myFrameCopy[r,]$c <- "Odd"
}
}
myFrameCopy <- myFrame
myFrameCopy$c <- NA
for (r in 1:nrow(myFrameCopy))
{
val <- myFrameCopy[r,]$int
i <- myFrameCopy[r,]$index1
if(val <5 & i == "A")
{
myFrameCopy[r,]$c <- "EvenSmall"
}else if (i == "A")
{
myFrameCopy[r,]$c <- "EvenLarge"
}else
{
myFrameCopy[r,]$c <- "Odd"
}
}
myFrameCopy
with(myFrame[myFrame$int <5 & myFrame$oddEven == "Even",], myFrameCopy$c <- "EvenSmall")
myFrameCopy
#kortere for loop
with(myFrame[myFrame$int <5 & myFrame$oddEven == "Even",], myFrameCopy2$r <- "EvenSmall")
myFrameCopy2$r <- NA
myFrameCopy2 <- myFrame
myFrameCopy2$r <- NA
#kortere for loop
with(myFrame[myFrame$int <5 & myFrame$oddEven == "Even",], myFrameCopy2$r <- "EvenSmall")
myFrameCopy2
#kortere for loop
with(myFrameCopy2[myFrameCopy2$int <5 & myFrameCopy2$oddEven == "Even",]$myFrameCopy2$r <- "EvenSmall")
#kortere for loop
myFrameCopy2[myFrameCopy2$int <5 & myFrameCopy2$oddEven == "Even",]$myFrameCopy2$r <- "EvenSmall"
myFrameCopy2 <- myFrame
#kortere for loop
myFrameCopy2[myFrameCopy2$int < 5 & myFrameCopy2$oddEven == "Even",]$r <- "EvenSmall"
LengteHetzelfde("kaas", WoordenlijstTraining)
setwd("C:\\Users\\Marilva\\Documents")
load("allData2018(1).Rdata")
WoordenlijstTraining <- read.csv("trainingList.csv", header = TRUE)
LengteHetzelfde <- function(woord, lijst)
{
lengte <- nchar(woord)
KeuzeWoorden <- lijst[lijst$nrLetters == lengte, ]
Nieuwwoord <- KeuzeWoorden[sample(nrow(KeuzeWoorden), 1), ]
as.character(Nieuwwoord[[1,2]])
}
LengteHetzelfde("kaas", WoordenlijstTraining)
kaas <- 'hi'
kaas
?substring
setwd("C:\\Users\\Marilva\\Documents\\GitHub\\Statistiek")
load("allData2018(1).Rdata")
WoordenlijstTraining <- read.csv("trainingList.csv", header = TRUE)
LengteHetzelfde <- function(woord, lijst)
{
lengte <- nchar(woord)
KeuzeWoorden <- lijst[lijst$nrLetters == lengte, ]
Nieuwwoord <- KeuzeWoorden[sample(nrow(KeuzeWoorden), 1), ]
as.character(Nieuwwoord[[1,2]])
}
LengteHetzelfde("kaas", WoordenlijstTraining)
WoordenlijstTraining$beginLetter <- NA
for (r in 1:nrow(WoordenlijstTraining)){
woord <- WoordenlijstTraining[r,]$eandowf
woord
}
LengteHetzelfde("kaas", WoordenlijstTraining)
for (r in 1:nrow(WoordenlijstTraining)){
woord <- WoordenlijstTraining[r,]$eandowf
WoordenlijstTraining[r,]$beginLetter <- substr(woord, 1, 1)
}
LengteHetzelfde <- function(woord, lijst)
{
lengte <- nchar(woord)
KeuzeWoorden <- lijst[lijst$nrLetters == lengte, ]
Nieuwwoord <- KeuzeWoorden[sample(nrow(KeuzeWoorden), 1), ]
as.character(Nieuwwoord[1,2])
}
LengteHetzelfde("kaas", WoordenlijstTraining)
eersteLetterHetzelfde <- function(woord)
{
WoordenlijstTraining$beginLetter <- NA
for (r in 1:nrow(WoordenlijstTraining))
{
string <- WoordenlijstTraining[r,]$eandowf
WoordenlijstTraining[r,]$beginLetter <- substr(string, 1, 1)
}
begin <- substr(woord, 1, 1)
Keuzes <- WoordenlijstTraining[WoordenlijstTraining$beginLetter == begin, ]
output <- Keuzes[sample(nrow(Keuzes), 1), ]
as.character(output[1,2])
}
eersteLetterHetzelfde(aardbei)
eersteLetterHetzelfde('aardbei')
begin <- substr(woord, 1, 1)
Keuzes <- WoordenlijstTraining[WoordenlijstTraining$beginLetter == begin, ]
output <- Keuzes[sample(nrow(Keuzes), 1), ]
as.character(output[1,2])
}
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde <- function(woord)
{
WoordenlijstTraining$beginLetter <- NA
for (r in 1:nrow(WoordenlijstTraining))
{
string <- WoordenlijstTraining[r,]$eandowf
WoordenlijstTraining[r,]$beginLetter <- substr(string, 1, 1)
}
begin <- substr(woord, 1, 1)
Keuzes <- WoordenlijstTraining[WoordenlijstTraining$beginLetter == begin, ]
output <- Keuzes[sample(nrow(Keuzes), 1), ]
as.character(output[1,2])
}
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
eersteLetterHetzelfde('aardbei')
